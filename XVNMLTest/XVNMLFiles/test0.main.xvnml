<proxy name::"test0.main" lang::"CSharp" engine::"Native">
	<castDefinitions>
		<cast name::"Hana" src::"Hana/Hana.cast.xvnml"/>
	</castDefinitions>

	<sceneDefinitions>
		<scene name::"Home" 			src::$nil/>
		<scene name::"OutsideOfSchool" 	src::"School/OutsideOfSchool.scene.xvnml"/>
		<scene name::"Class1A" 			src::$nil/>
		<scene name::"Cafeteria" 		src::$nil/>
	</sceneDefinitions>

	<dialogue name::"BasicXVNMLTutorial">
		@Hana>Smile {sts::60}Not sure if this works...>V::000>E::Happy But I'm going to do the thing anyways.<
		@Hana>Smile {sts::60}Hello!<
		@* If you are reading this{del::750|exp::"Happy"} GREAT JOB!<
		@Hana>Smile Now, it's time to incoporate Cast data{del::500}, such as what emotion{n}
		they are showing{del::500}, or how they sound!<
		@* This will be a new chapter in our XVNML journey!
		{n}We'll be going over the following concepts:
		{n|w|bul1|w|ins::"Dialogues"|del::500|n
		|w|bul1|w|ins::"Prompts"|del::500|n
		|w|bul1|w|ins::"Prompts"|paren|ins::"Input"|paren_end|del::500|n
		|w|bul1|w|ins::"Cast Signatures"|del::500|n
		|w|bul1|w|ins::"Cast Definitions"|del::500|n
		|w|bul1|w|ins::"Custom Tags"|del::500|n
		|w|bul1|w|ins::"Custom Macros"|del::500|n
		|w|bul1|w|ins::"Expressions"|del::500|n
		|w|bul1|w|ins::"Voices"|del::500|n
		|w|bul1|w|ins::"Settings Up Poses"|del::500|n
		|w|bul1|w|ins::"The Dialogue Writer"|del::500|n
		|w|bul1|w|ins::"Different Dialogue Writer Events"|del::500|n
		|w|bul1|w|ell|ins::"and much, much more!"}<
		@* I don't even know how far I can even take this.<
		@* There's a lot of stuff that we have to consider{n}
		when it comes to implementing the Cast Expressions and Voices.<
		@* First is the actually stashing of the current cast.<
		@* As I last checked{del::500}, the DialogueLine only has{n}
		information for the Name{del::500}, the Expression{del::500}, and Voice{del::500}, but not necessarily{n}
		the Cast that this dialogue pertains to.<
		@* The CLOSEST information that we got on{del::500|ins::" THAT"|del::500} is the{n}
		CastSignatureInfo that's attached to the DialogueLine...{del::500|clr}
		But nothing more.< 
		@* So we're going to have to do some refactoring on our DialogueLine...{del::500|n}
		to make sure that we're able to have access to the Cast.<
		@Hana>V::Wow>E::Happy That way{del::250}, when we need to change expressions, we can tell the Cast associated with the DialogueLine{n}
		to change expressions {paren}and{slash}or voice{paren_end|del::500|n}
		and then do the proper callbacks!<
		@Hana>Smile The last thing we need to consider{del::500} is the actual raw data of the image and audio files.<
		@* We want to be able to take those bytes{del::500}, and have it be converted to a specific type.<
		@* We want to try to limit the heavy-lifting for the person using this tool{del::500|n}
		but honestly{del::500}, that's our goal!<
		@Hana>Happy We want to make creating Visual Novels{del::500} and Story-Centric games{del::500} as easy as possible to implement!<
		@Hana>Smile So with that said{del::1000|exp::"Happy"|vo::"Wow"} let's get on with it!<<
	</dialogue>

	<dialogue name::"PromptsExample">
		@Hana>Smile {sts::60}I've just received some great news!<
		@*>Happy>Wow You definitely want to hear this.> 
		Because this will change the way how we use XVNML2U from here on.<
		@*>Smile It's a feature that XVNML2U definitely needed.<
		@* And the feature in question...<
		?* Can you guess?{pause}>>
		(
			("Based on what I'm seeing, it looks like we've implemented prompts...")>
			@Hana You seen pretty confident...<
			?* Are you sure about your answer?>>
			(
				("I'm positive!")>
				@Hana>Happy>Wow That's correct!<<
					
				("You're making me have second thoughts...")>
				@Hana Well...<
				@*>Happy>Wow You're correct!<<
			)

			("Best cast representation?")>
			@Hana No, silly!<<

			("Does it have something to do with Unity?")>
			@Hana Actually, it does have something to do with Unity.<
			@* More specifically, it has something to do with the updated XVNML API
			that can be implemented to Unity.<<
		)
		@*>Happy IT'S PROMPTS!!!<
		@*>Smile We're in the process of taking the updated XVNML API and implementing prompts for you.<
		@* The user should be able to type in a prompt{pause}, and inside the game, you can click on the different responses.<
		@* From then, you can then have branching dialogues that does different things!<
		@*>Happy A feature that's essential for creating Visual Novels!<
		?*>Smile So tell me, how do you think about XVNML2U so far?>>
		(
			("It's pretty awesome!")>
			@Hana>Happy>Wow That's great to hear!<<

			("I'm not too sure yet...")>
			@Hana Well, this isn't all that XVNML2U can offer.<
			@* Give it a couple of months{pause}, it'll come out super special.<
			@*>Happy I promise you that!<<

			("It could do better")>
			@Hana Well of course it can.<
			@* We're only beginning to scratch the service.<
			@* Eventually, it'll be a tool that will change how people does 
			story-centric content inside Unity.<
			@*>Happy You can bet your lucky stars on that one.<<
		)
		@*>Smile In the future, we'll be about to do 
		a lot more with XVNML2U.<
		@* Like Cast Reactions, playing audio {paren}not including Cast Voices{paren_end},
		moving cast to a position of the screen...<
		@* Scene loading and transitions, Text Motions...<
		@*>Happy>Wow And so much more!!!<
		@*>Smile If you made it this far...<
		@*>Happy Then we've officially implmented prompts!<
		?Hana>Smile What do you want to do today?>>
		(
			("Create more visual novels...")>
				@Hana>Happy Good choice!<
				@* I actually have a really great story idea!<
				@* Want to hear it?<<
			("Hang out with you...")>
				@Hana>Happy Hehe!<
				@* That's very sweet!<
				@* Let's hang out then!<<
			("Sleep...")>
				@* You must be tired then.<
				@* I'll always be here if you want to do anything!<<
		)
	</dialogue>
</proxy>