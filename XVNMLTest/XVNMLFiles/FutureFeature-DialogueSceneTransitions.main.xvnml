<proxy name::"test0.main" lang::"CSharp" engine::"Unity" screenWidth::1920 screenHeight::1080>
	<castDefinitions>
		<cast name::"Hana" src::"Hana/Hana.cast.xvnml"/>
	</castDefinitions>

	<sceneDefinitions>
		<scene name::"Home" 			        src::$nil/>
		<scene name::"OutsideOfSchool" 	        src::"School/OutsideOfSchool.scene.xvnml"/>
        <scene name::"PromptUseCaseDiagram"     src::$nil/>
		<scene name::"Class1A" 			        src::$nil/>
		<scene name::"Cafeteria" 		        src::$nil/>
	</sceneDefinitions>

    $/ We took the original BasicXVNMLTutorial-Prompts dialogue, and turned it into a DialogueGroup instead.
       Our next task is to implement new tags, as well as create new Parameter Values and Flags to get data for loading scenes.
       You could argue that we could take the "modification" or "override" approach, and allow Unity to override the functionalities
       of the DialogueGroup to do new things...
       or have Unity create unique tags such as SceneTransitionFxDefinitions tag, SceneTransitionFx Tag, Animation Tags, From/To Tags, and Color tags...
       
       I don't know... It might be better that way, but it would allow inconsistencies for the DialogueGroup tag (unless unity creates a whole new seperate tags of its own).
       But yeah.                                                                                                                                                            /$
	<dialogueGroup name::"BasicXVNMLTutorial-Prompts(As Group)" #actAsSceneController>
		<sceneTransitionFxDefinitions>
			<sceneTransitionFx name::"FadeOut">
				<animation rate::60 duration::3 unit::Seconds>
					<to>
						<color value::000000 alpha::1/>
					</to>
				</animation>
			</sceneTransitionFx>
			<sceneTransitionFx name::"FadeIn">
				<animation rate::60 duration::3 unit::Seconds>
					<from>
						<color value::000000 alpha::1/>
					</from>
					<to>
						<color value::ffffff alpha::0/>
					</to>
				</animation>
			</sceneTransitionFx>
		</sceneTransitionDefinitions>

		<dialogue useScene::$OutsideOfSchool enterWith::$FadeIn exitWith::$FadeOut>
			@Hana>Smile {sts::45}I've just received some great news!<
			@*>Happy>Wow You definitely want to hear this.> 
			Because this will change the way how we use XVNML2U from here on.<
			@*>Smile It's a feature that XVNML2U definitely needed.<
			@* And the feature in question...<
			?* Can you guess?{pause}>>
			(
				("Based on what I'm seeing, it looks like we've implemented prompts...")>
				@Hana You seem pretty confident...<
				?* Are you sure about your answer?{pause}>>
				(
					$> It's best practice that at every start of a prompt response
					$> you start with a Normal Cast Definition (@[cast_name]) as opposed to a 
					$> Persistent Cast Definition (@*).
					$> Although both work, starting with a Normal Cast will 
					$> keep track of who's still talking.
					("I'm positive!")>
					?Hana Are you absolutely sure?>>
					(
						("Seal in my answer!")>
						@Hana>Happy>Wow That's correct!<<

						("Now you're really scaring me...")>
						@Hana No need to be scared!<
						@*>Happy>Wow You're actually correct!<<
					)
						
					("You're making me have second thoughts...")>
					@Hana Well...<
					@*>Happy>Wow You're correct!<<
				)

				("Best cast representation?")>
				@Hana No, silly!<<

				("Does it have something to do with Unity?")>
				@Hana Actually,{del::500} it does have something to do with Unity.<
				@* More specifically,{del::500} it has something to do with the updated XVNML API
				that can be implemented to Unity.<<
			)
			$> It's also best practice to start with a Normal Cast Definition
			$> at every end of a prompt.
			@Hana IT'S PROMPTS!!!<<
		</dialogue>

		<dialogue useScene::$PromptUseCaseDiagram enterWith::$FadeIn exitWith::$FadeOut>
			@*>Smile We're in the process of taking the updated XVNML API and implementing prompts for you.<
			@* The user should be able to type in a prompt{pause}, and inside the game, you can click on the different responses.<
			@* From then,{del::500} you can then have branching dialogues that does different things!<
			@*>Happy A feature that's essential for creating Visual Novels!<<
		</dialogue>

		<dialogue useScene::$OutsideOfSchool enterWith::$FadeIn exitWith::$FadeOut>
			?*>Smile So tell me, how do you think about XVNML2U so far?>>
			(
				("It's pretty awesome!")>
				@Hana>Happy>Wow That's great to hear!<<

				("I'm not too sure yet...")>
				@Hana Well,{del::500} this isn't all that XVNML2U can offer.<
				@* Give it a couple of months{pause}, it'll come out super special.<
				@*>Happy I promise you that!<<

				("It could do better")>
				@Hana Well of course it can.<
				@* We're only beginning to scratch the service.<
				@* Eventually{del::500}, it'll be a tool that will change how people does 
				story-centric content inside Unity.<
				@*>Happy You can bet your lucky stars on that one.<<
			)
			@Hana>Smile In the future, we'll be about to do 
			a lot more with XVNML2U.<
			@* Like Cast Reactions,{del::500} 
			playing audio{del::500|sts::60} 
			{paren}not including Cast Voices{paren_end|del::500|sts::30}, 
			moving cast to a position of the screen...<
			@* Scene loading and transitions,{del::500} Text Motions...<
			@*>Happy And so much more!!!<
			@*>Smile If you made it this far...<
			@*>Happy Then we've officially implmented prompts!<
			?*>Smile What do you want to do today?>>
			(
				("Create more visual novels...")>
					@Hana>Happy Good choice!<
					@* I actually have a really great story idea!<
					@* Want to hear it?<<

				("Hang out with you...")>
					@Hana>Happy>Wow Hehe!<
					@* That's very sweet!<
					@* Let's hang out then!<<
						
				("Sleep...")>
					@Hana You must be tired then.<
					@* I'll always be here if you want to do anything!<<
			)
		</dialogue>
	</dialogueGroup>
</proxy>